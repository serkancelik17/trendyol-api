<?php

namespace Entegrator\TrendyolApi\V1\Tests\Models\Product\Response;

use Entegrator\TrendyolApi\V1\Models\Product\BatchRequest\Request\BatchRequestRequest;
use Entegrator\TrendyolApi\V1\Models\Product\BatchRequest\Response\BatchRequestResponse;
use Entegrator\TrendyolApi\V1\Schemas\BatchRequest\Item;
use PHPUnit\Framework\TestCase;
use Prophecy\Comparator\Factory;

class BatchRequestResponseTest extends TestCase
{
    /**
     * @var BatchRequestRequest
     */
    private mixed $mReq;
    private int $fNumber;
    private string $fString;

    function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->mReq = $this->createMock(BatchRequestRequest::class);
        $this->fNumber = rand(1000,1000000);
        $this->fString = uniqid();
    }

    function testGetItems() {
        $this->mReq->method('run')->willReturn('{"items": [{"status" : "'.$this->fString.'"}]}');
        $response = new BatchRequestResponse($this->mReq);

        $actual = $response->getItems()[0]->getStatus();

        $this->assertSame($this->fString,$actual);
    }

    function testSetItems() {
        $this->mReq->method('run')->willReturn('{}');
        $response = new BatchRequestResponse($this->mReq);
        $items = [['status' => 'Delivered']];

        $response->setItems($items);

        $this->assertSame($items[0]['status'],$response->getItems()[0]->getStatus());
    }

    function testGetStatus() {
        $this->mReq->method('run')->willReturn('{"status" : "'.$this->fString.'"}');
        $response = new BatchRequestResponse($this->mReq);

        $actual = $response->getStatus();

        $this->assertSame($this->fString,$actual);
    }

    function testSetStatus() {
        $this->mReq->method('run')->willReturn('{}');
        $response = new BatchRequestResponse($this->mReq);

        $response->setStatus($this->fString);

        $this->assertSame($this->fString,$response->getStatus());
    }

    function testGetCreationDate() {
        $this->mReq->method('run')->willReturn('{"creationDate" : '.$this->fNumber.'}');
        $response = new BatchRequestResponse($this->mReq);

        $actual = $response->getCreationDate();

        $this->assertSame($this->fNumber,$actual);
    }

    function testSetCreationDate() {
        $this->mReq->method('run')->willReturn('{}');
        $response = new BatchRequestResponse($this->mReq);

        $response->setCreationDate($this->fNumber);

        $this->assertSame($this->fNumber,$response->getCreationDate());
    }

    function testGetLastModification() {
        $this->mReq->method('run')->willReturn('{"lastModification" : '.$this->fNumber.'}');
        $response = new BatchRequestResponse($this->mReq);

        $actual = $response->getLastModification();

        $this->assertSame($this->fNumber,$actual);
    }

    function testSetLastModification() {
        $this->mReq->method('run')->willReturn('{}');
        $response = new BatchRequestResponse($this->mReq);

        $response->setLastModification($this->fNumber);

        $this->assertSame($this->fNumber,$response->getLastModification());
    }

    function testGetSourceType() {
        $this->mReq->method('run')->willReturn('{"sourceType" : "'.$this->fString.'"}');
        $response = new BatchRequestResponse($this->mReq);

        $actual = $response->getSourceType();

        $this->assertSame($this->fString,$actual);
    }

    function testSetSourceType() {
        $this->mReq->method('run')->willReturn('{}');
        $response = new BatchRequestResponse($this->mReq);

        $response->setSourceType($this->fString);
        $actual = $response->getSourceType();

        $this->assertSame($this->fString, $actual);
    }

    function testGetItemCount() {
        $this->mReq->method('run')->willReturn('{"itemCount" : '.$this->fNumber.'}');
        $response = new BatchRequestResponse($this->mReq);

        $actual = $response->getItemCount();

        $this->assertSame($this->fNumber,$actual);
    }

    function testSetItemCount() {
        $this->mReq->method('run')->willReturn('{}');
        $response = new BatchRequestResponse($this->mReq);

        $response->setItemCount($this->fNumber);

        $this->assertSame($this->fNumber,$response->getItemCount());
    }

    function testGetFailedItemCount() {
        $this->mReq->method('run')->willReturn('{"failedItemCount" : '.$this->fNumber.'}');
        $response = new BatchRequestResponse($this->mReq);

        $actual = $response->getFailedItemCount();

        $this->assertSame($this->fNumber,$actual);
    }

    function testSetFailedItemCount() {
        $this->mReq->method('run')->willReturn('{}');
        $response = new BatchRequestResponse($this->mReq);

        $response->setFailedItemCount($this->fNumber);
        $actual = $response->getFailedItemCount();

        $this->assertSame($this->fNumber, $actual);
    }

    function testGetBatchRequestType() {
        $this->mReq->method('run')->willReturn('{"batchRequestType" : "'.$this->fString.'"}');
        $response = new BatchRequestResponse($this->mReq);

        $actual = $response->getBatchRequestType();

        $this->assertSame($this->fString,$actual);
    }

    function testSetBatchRequestType() {
        $this->mReq->method('run')->willReturn('{}');
        $response = new BatchRequestResponse($this->mReq);

        $response->setBatchRequestType($this->fString);
        $actual = $response->getBatchRequestType();

        $this->assertSame($this->fString, $actual);
    }

}