<?php

namespace Entegrator\TrendyolApi\V1\Tests\Models\Product\Brand\Request;

use PHPUnit\Framework\TestCase;
use Entegrator\TrendyolApi\V1\Models\Product\Brand\Request\QueryParameter;

class QueryParameterTest extends TestCase
{
    private int $fInt;

    function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->fInt = rand(1000,1000000);
    }

    function testGetPage() {
        $qp = new QueryParameter($this->fInt,$this->fInt);

        $expected = $this->fInt;
        $actual = $qp->getPage();

        $this->assertSame($expected,$actual);
    }

    function testSetPage() {
        $qp = new QueryParameter($this->fInt,$this->fInt);

        $qp->setPage($this->fInt);
        $expected = $this->fInt;
        $actual = $qp->getPage();

        $this->assertSame($expected,$actual);
    }

    function testGetSize() {
        $qp = new QueryParameter($this->fInt,$this->fInt);

        $expected = $this->fInt;
        $actual = $qp->getSize();

        $this->assertSame($expected,$actual);
    }

    function testSetSize() {
        $qp = new QueryParameter($this->fInt,$this->fInt);

        $qp->setSize($this->fInt);
        $expected = $this->fInt;
        $actual = $qp->getSize();

        $this->assertSame($expected,$actual);
    }

    function testToArray() {
        $qp = new QueryParameter($this->fInt,$this->fInt);

        $expected = ['page'=>$this->fInt,'size' => $this->fInt];
        $actual = $qp->toArray();

        $this->assertSame($expected,$actual);
    }

    function test__ToString() {
        $qp = new QueryParameter($this->fInt,$this->fInt);

        $expected = "page=$this->fInt&size=$this->fInt";
        $actual = (string) $qp;

        $this->assertSame($expected,$actual);
    }

}